{"version":3,"sources":["click.mp3","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","ColorCard","styled","div","props","color","App","state","value","copied","schemaColor","isGettingName","colors","handleOnAddColor","push","name","setState","handleOnDeleteColor","index","newColors","filter","cIndex","handleOnChangeColor","input","handleOnClickGettingName","handleOnCreateSchema","schema","map","item","join","alert","handleOnChangeSchemaColor","currentTarget","split","handleOnClickColorCard","Audio","soundClick","play","this","className","src","logo","alt","onClick","href","target","type","id","htmlFor","onChange","placeholder","key","text","length","onCopy","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.976ef893.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click.627c0e8b.mp3\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport styled from \"styled-components\";\nimport soundClick from \"./click.mp3\";\nimport \"./app.scss\";\n\nconst ColorCard = styled.div`\n    background: ${(props) => props.color};\n`;\n\nclass App extends Component {\n    state = {\n        value: \"\",\n        copied: false,\n        schemaColor: \"\",\n        isGettingName: false,\n        colors: [],\n    };\n\n    handleOnAddColor = () => {\n        const { colors } = this.state;\n        colors.push({ color: \"\", name: \"\" });\n\n        this.setState({ colors });\n    };\n\n    handleOnDeleteColor = (index) => {\n        const { colors } = this.state;\n        const newColors = colors.filter((color, cIndex) => cIndex !== index);\n\n        this.setState({ colors: newColors });\n    };\n\n    handleOnChangeColor = (index, input) => {\n        const { colors } = this.state;\n        colors[index][input.name] = input.value;\n\n        this.setState({ colors });\n    };\n\n    handleOnClickGettingName = () => {\n        let { isGettingName } = this.state;\n        isGettingName = !isGettingName;\n\n        this.setState({ isGettingName });\n    };\n\n    handleOnCreateSchema = () => {\n        let { colors } = this.state;\n        const schema = colors\n            .map((item) => {\n                return item.name && item.color ? item.name + \"=\" + item.color : \"\";\n            })\n            .join(\"?\");\n\n        alert(\"Your schema: \" + schema);\n    };\n\n    handleOnChangeSchemaColor = ({ currentTarget: input }) => {\n        let { schemaColor } = this.state;\n        schemaColor = input.value;\n\n        const colors = schemaColor.split(\"?\").map((item) => {\n            const color = item.split(\"=\");\n            return { name: color[0], color: color[1] };\n        });\n\n        this.setState({ schemaColor, colors });\n    };\n\n    handleOnClickColorCard = () => {\n        const sound = new Audio(soundClick);\n        sound.play();\n    };\n\n    render() {\n        const { colors, isGettingName } = this.state;\n\n        return (\n            <div className=\"App\">\n                <div className=\"controller__container\">\n                    <div className=\"logo\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    </div>\n                    <div className=\"btn\">\n                        <button onClick={this.handleOnAddColor}>Add Color</button>\n                        <a href=\"https://github.com/Heaty566/colors-picker.git\" target=\"__blank\">\n                            How to use ?\n                        </a>\n                        <button onClick={this.handleOnCreateSchema}>Create Schema</button>\n                        <div className=\"form__checkbox\">\n                            <input type=\"checkbox\" id=\"getting\" onClick={this.handleOnClickGettingName} />\n                            <label htmlFor=\"getting\">Getting Name</label>\n                        </div>\n\n                        <input\n                            type=\"text\"\n                            name=\"schemaColor\"\n                            onChange={this.handleOnChangeSchemaColor}\n                            className=\"form__input\"\n                            placeholder=\"Enter your colors schema\"\n                        />\n                    </div>\n                    <div className=\"color__input\">\n                        {colors.map((item, index) => {\n                            return (\n                                <div className=\"color__col\" key={index}>\n                                    <input\n                                        name=\"color\"\n                                        value={item.color ? item.color : \"\"}\n                                        onChange={({ currentTarget: input }) => this.handleOnChangeColor(index, input)}\n                                    />\n                                    <input\n                                        name=\"name\"\n                                        value={item.name ? item.name : \"\"}\n                                        onChange={({ currentTarget: input }) => this.handleOnChangeColor(index, input)}\n                                    />\n                                    <button onClick={() => this.handleOnDeleteColor(index)}>X</button>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n\n                <div className=\"colors__container\">\n                    {colors.map((item, index) => {\n                        return (\n                            <CopyToClipboard\n                                key={index}\n                                text={\n                                    this.state.colors.length\n                                        ? this.state.isGettingName\n                                            ? this.state.colors[index].name\n                                            : this.state.colors[index].color\n                                        : \"No Color\"\n                                }\n                                onCopy={() =>\n                                    this.setState({\n                                        copied: true,\n                                        value: this.state.colors[\n                                            this.state.isGettingName ? this.state.colors[index].name : this.state.colors[index].color\n                                        ],\n                                    })\n                                }\n                            >\n                                <ColorCard color={item.color} className=\"colors__card\" onClick={this.handleOnClickColorCard}>\n                                    <p>{isGettingName ? item.name : item.color}</p>\n                                </ColorCard>\n                            </CopyToClipboard>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.16057131.svg\";"],"sourceRoot":""}